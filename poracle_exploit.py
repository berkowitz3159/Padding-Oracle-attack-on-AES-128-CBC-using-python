import socket

def check_padding(data):
    server_host = 'Add server IP'
    server_port = Server_Port
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((server_host, server_port))
    initialization_vector = b'IV'
    initialization_vector = initialization_vector + b'\x0A'
    encoded_data = data.hex()
    encoded_data = encoded_data.encode() + b'\x0A'
    server_response = client_socket.recv(1024)
    client_socket.send(initialization_vector)
    server_response = client_socket.recv(1024)
    client_socket.send(encoded_data)
    feedback = client_socket.recv(1024)
    decoded_feedback = feedback.decode()
    print(decoded_feedback)
    if decoded_feedback.find('Padding') == -1:
        return True
    else:
        return False

def perform_padding_attack(ciphertext):
    iv = bytes.fromhex('IV')
    block_size = int(len(ciphertext) / 16)
    decrypted_message = bytes()

    for block_num in range(block_size, 0, -1):
        print("Block Number: ", block_num)
        block_ciphertext = ciphertext[(block_num - 1) * 16:block_num * 16]

        if block_num == 1:
            block_iv = iv
        else:
            block_iv = ciphertext[(block_num - 2) * 16:(block_num - 1) * 16]

        modified_iv = block_iv
        decrypted_block = bytearray(iv)
        padding_value = 0

        for byte_num in range(16, 0, -1):
            print("Byte Number: ", byte_num)
            padding_value += 1

            for guessed_value in range(0, 256):
                print("Guessed Value: ", guessed_value)
                modified_iv = bytearray(modified_iv)
                modified_iv[byte_num - 1] = (modified_iv[byte_num - 1] + 1) % 256
                crafted_ciphertext = bytes(modified_iv) + block_ciphertext
                is_valid_padding = check_padding(crafted_ciphertext)

                if is_valid_padding:
                    decrypted_block[-padding_value] = (
                        modified_iv[-padding_value] ^ block_iv[-padding_value] ^ padding_value
                    )

                    for k in range(1, padding_value + 1):
                        modified_iv[-k] = padding_value + 1 ^ decrypted_block[-k] ^ block_iv[-k]
                    break

        decrypted_message = bytes(decrypted_block) + bytes(decrypted_message)

    return decrypted_message[:-decrypted_message[-1]]

if __name__ == '__main__':
    ciphertext_text = bytes.fromhex('Ciphertext')
    print("Encrypted Message:", ciphertext_text)
    print("Decrypted Message:", perform_padding_attack(ciphertext_text).decode("ascii"))